diff --git a/CMakeLists.txt b/CMakeLists.txt
index c3f3ebf..c2223ae 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -15,6 +15,7 @@ option(USE_MBEDTLS "Use mbedtls as crypto library" OFF)
 option(BUILD_COMMON_LWS "Whether or not to build ProducerC libwebsockets common library" OFF)
 option(BUILD_COMMON_CURL "Whether or not to build ProducerC curl common library" ON)
 option(BUILD_OPENSSL_PLATFORM "If buildng OpenSSL what is the target platform" OFF)
+option(LOCAL_OPENSSL_BUILD "Whether or not to use local OpenSSL build" OFF)
 
 # Developer Flags
 option(BUILD_TEST "Build the testing tree." OFF)
@@ -63,15 +64,18 @@ if(BUILD_DEPENDENCIES)
     message(FATAL_ERROR "Only one of ${SSL_OPTIONS} can be enabled")
   endif()
 
-  if(USE_OPENSSL)
-    set(BUILD_ARGS -DBUILD_STATIC=${BUILD_STATIC}
-                   -DBUILD_OPENSSL_PLATFORM=${BUILD_OPENSSL_PLATFORM})
-    build_dependency(openssl ${BUILD_ARGS})
-  elseif(USE_MBEDTLS)
-    set(BUILD_ARGS -DBUILD_STATIC=${BUILD_STATIC})
-    build_dependency(mbedtls ${BUILD_ARGS})
-  else()
-    message(FATAL_ERROR "No crypto library selected.")
+  if(NOT LOCAL_OPENSSL_BUILD)
+    message(STATUS "Building non-local OpenSSL")
+    if(USE_OPENSSL)
+      set(BUILD_ARGS -DBUILD_STATIC=${BUILD_STATIC}
+                    -DBUILD_OPENSSL_PLATFORM=${BUILD_OPENSSL_PLATFORM})
+      build_dependency(openssl ${BUILD_ARGS})
+    elseif(USE_MBEDTLS)
+      set(BUILD_ARGS -DBUILD_STATIC=${BUILD_STATIC})
+      build_dependency(mbedtls ${BUILD_ARGS})
+    else()
+      message(FATAL_ERROR "No crypto library selected.")
+    endif()
   endif()
 
   if (BUILD_COMMON_LWS)
@@ -274,12 +278,21 @@ if(BUILD_COMMON_CURL)
       "${CMAKE_CURRENT_SOURCE_DIR}/libkvsCommonCurl.pc.cmake"
       "${CMAKE_CURRENT_BINARY_DIR}/libkvsCommonCurl.pc" @ONLY)
 
+    if(BUILD_STATIC)
+      # Curl will enable ZLIB as part of its build if it finds
+      # the package. We need to therefore link it for static builds. 
+      find_package(ZLIB)
+      if(ZLIB_FOUND)
+        list(APPEND CURL_LIBRARIES z)
+      endif()
+    endif()
+
     add_library(kvsCommonCurl STATIC ${KVS_COMMON_SOURCE_FILES_BASE} ${KVS_COMMON_SOURCE_FILES_CURL})
     target_compile_definitions(kvsCommonCurl PRIVATE KVS_BUILD_WITH_CURL ${CPRODUCER_COMMON_TLS_OPTION})
     target_link_libraries(kvsCommonCurl
-            ${PRODUCER_CRYPTO_LIBRARY}
             kvspicUtils
-            ${CURL_LIBRARIES})
+            ${CURL_LIBRARIES}
+            ${PRODUCER_CRYPTO_LIBRARY})
 
     install(
       TARGETS kvsCommonCurl
@@ -315,12 +328,6 @@ if(BUILD_COMMON_CURL)
       FILES ${CMAKE_CURRENT_BINARY_DIR}/libcproducer.pc
       DESTINATION "${CMAKE_INSTALL_LIBDIR}/pkgconfig")
 
-    add_executable(kvsVideoOnlyStreamingSample ${KINESIS_VIDEO_PRODUCER_C_SRC}/samples/KvsVideoOnlyStreamingSample.c)
-    target_link_libraries(kvsVideoOnlyStreamingSample cproducer)
-
-    add_executable(kvsAudioVideoStreamingSample ${KINESIS_VIDEO_PRODUCER_C_SRC}/samples/KvsAudioVideoStreamingSample.c)
-    target_link_libraries(kvsAudioVideoStreamingSample cproducer)
-
     if (BUILD_TEST)
         add_subdirectory(tst)
     endif()
